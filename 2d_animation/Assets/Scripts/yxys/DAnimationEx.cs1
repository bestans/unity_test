using UnityEngine;
using System.Collections;
using ClientCore;

[RequireComponent(typeof(Animation))]
public class DAnimationEx : MonoBehaviour {

    [System.Serializable]
    public class AnimationPath {
        public string aniName;
        public string aniPath;

        public AnimationClip GetClip() {
            return RAnimationClip.Singleton.Load(aniPath, aniName);
        }
    }

    public AnimationPath[] animationPaths;

    public void Play(string aniName) {
        if (animationPaths == null || animationPaths.Length == 0) {
            return;
        }

        if (animation == null) {
            gameObject.AddComponent<Animation>();
        }

        if (animation.GetClip(aniName) != null) {
            animation.Play(aniName);
        }
        else {
            AnimationPath ap = IsContains(aniName);
            if (ap == null) {
                GlobalToolsFunction.LogError("AnimationEx Play None aniName = " + aniName);
                return;
            }

            AnimationClip clip = ap.GetClip();
            if (clip == null) {
                GlobalToolsFunction.LogError("AnimationEx GetClip err! aniPath = " + ap.aniPath + ",aniName = " + ap.aniName);
                return;
            }

            animation.AddClip(clip, aniName);
            animation.Play(aniName);
        }
    }

    public void LoadAll() {
        StartCoroutine(PreLoadAnimation());
    }

    public AnimationPath IsContains(string aniName) {
        if (string.IsNullOrEmpty(aniName)){
            return null;
        }
        for (int i = 0, iMax = animationPaths.Length; i < iMax; i++) {
            if (aniName.Equals(animationPaths[i].aniName)) {
                return animationPaths[i];
            }
        }
        return null;
    }

    public void LoadAllNoCoroutine() {
        if (animation == null || animationPaths == null || animationPaths.Length == 0) {
            return;
        }

        for (int i = 0, iMax = animationPaths.Length; i < iMax; i++) {
            AnimationClip clip = animationPaths[i].GetClip();
            if (clip != null) {
                animation.AddClip(clip, animationPaths[i].aniName);
            }
        }
    }

    public IEnumerator PreLoadAnimation() {
        if (animation == null || animationPaths == null || animationPaths.Length == 0) {
            yield break;
        }

        for (int i = 0, iMax = animationPaths.Length; i < iMax; i++) {
            AnimationClip clip = animationPaths[i].GetClip();
            if (clip != null) {
                animation.AddClip(clip, animationPaths[i].aniName);

                //3帧加完动作
                if (iMax > 3 && i % (int)(iMax / 3) == 0)
                    yield return 1;
            }
        }
    }

    virtual public IEnumerator PreLoadEffect() {
        yield return 1;
    }

    public static IEnumerator Play(Animation ani, string clipName, bool useTimeScale, System.Action onComplete) {
        if (!useTimeScale) {
            bool isPlaying = true;
            float _progressTime = 0F;
            float _timeAtLastFrame = 0F;
            float _timeAtCurrentFrame = 0F;
            float deltaTime = 0F;
            ModelManager.PlayAnimation(ani.gameObject, clipName, WrapMode.Loop);
            _timeAtLastFrame = Time.realtimeSinceStartup;
            AnimationState _currState = ani[clipName];
            while (isPlaying) {
                _timeAtCurrentFrame = Time.realtimeSinceStartup;
                deltaTime = _timeAtCurrentFrame - _timeAtLastFrame;
                _timeAtLastFrame = _timeAtCurrentFrame;

                _progressTime += deltaTime;
                _currState.normalizedTime = _progressTime / _currState.length;
                ani.Sample();
                if (_progressTime >= _currState.length) {
                    if (_currState.wrapMode != WrapMode.Loop) {
                        isPlaying = false;
                    }
                    else {
                        _progressTime = 0.0f;
                    }
                }
                yield return new WaitForEndOfFrame();
            }
            yield return null;
            if (onComplete != null) {
                onComplete();
            }
        }
        else {
            ModelManager.PlayAnimation(ani.gameObject, clipName, WrapMode.Once);
        }
    }
}
